// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name NPayFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CoreNFC
import CryptoSwift
import DeveloperToolsSupport
import Foundation
import ImageIO
import KeychainAccess
import Lottie
@_exported import NPayFramework
import Photos
import Security
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _CoreNFC_UIKit
import _StringProcessing
import _SwiftConcurrencyShims
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
  public static func loadFonts()
}
public enum IconType : Swift.Int {
  case font
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class SkyFloatingLabelTextFieldWithIcon : NPayFramework.SkyFloatingLabelTextField {
  @_Concurrency.MainActor @preconcurrency open var iconType: NPayFramework.IconType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var iconImageView: UIKit.UIImageView!
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var iconImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var templateImage: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var iconLabel: UIKit.UILabel!
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var iconFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var iconText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var iconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var selectedIconColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var iconWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var iconMarginLeft: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var iconMarginBottom: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var iconRotationDegrees: Swift.Double {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency convenience public init(frame: CoreFoundation.CGRect, iconType: NPayFramework.IconType)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override open func updateColors()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class TextFieldEffects : UIKit.UITextField {
  public enum AnimationType : Swift.Int {
    case textEntry
    case textDisplay
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public typealias AnimationCompletionHandler = (_ type: NPayFramework.TextFieldEffects.AnimationType) -> ()
  @_Concurrency.MainActor @preconcurrency final public let placeholderLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency open func animateViewsForTextEntry()
  @_Concurrency.MainActor @preconcurrency open func animateViewsForTextDisplay()
  @_Concurrency.MainActor @preconcurrency open var animationCompletionHandler: NPayFramework.TextFieldEffects.AnimationCompletionHandler?
  @_Concurrency.MainActor @preconcurrency open func drawViewsForRect(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency open func updateViewsForBoundsChange(_ bounds: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func drawPlaceholder(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView!)
  @objc @_Concurrency.MainActor @preconcurrency open func textFieldDidBeginEditing()
  @objc @_Concurrency.MainActor @preconcurrency open func textFieldDidEndEditing()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct Actions {
  public static let LOGIN: Swift.String
  public static let OPEN_WALLET: Swift.String
  public static let DEPOSIT: Swift.String
  public static let TRANSFER: Swift.String
  public static let WITHDRAW: Swift.String
  public static let BUY_PHONE_CARD: Swift.String
  public static let TOPUP_PHONE_CARD: Swift.String
  public static let HISTORY: Swift.String
  public static let SHOP: Swift.String
  public static let TOPUP_DATA_CARD: Swift.String
  public static let BUY_SERVICES_CARD: Swift.String
  public static let QR: Swift.String
  public static let BILLING_DIEN: Swift.String
  public static let BILLING_TRUYEN_HINH: Swift.String
  public static let BILLING_DIEN_THOAI: Swift.String
  public static let BILLING_INTERNET: Swift.String
  public static let BILLING_NUOC: Swift.String
  public static let BILLING_BAO_HIEM: Swift.String
  public static let BILLING_TAI_CHINH: Swift.String
  public static let BILLING_TRA_SAU: Swift.String
  public static let BILLING_TIN_DUNG: Swift.String
  public static let BILLING_HOC_PHI: Swift.String
  public static let BILLING_TRA_GOP: Swift.String
  public static let BILLING_VE_TAU_XE: Swift.String
  public static let BILLING_VETC: Swift.String
}
public enum PaymentMethod : Swift.String {
  case WALLET
  case ATM_CARD
  case CREDIT_CARD
  case LINK_BANK
  case DEFAULT
  case TRANSFER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ServiceAction : Swift.String {
  case LOGIN
  case RESET_PASSWORD
  case DEPOSIT
  case TRANSFER
  case WITHDRAW
  case HISTORY
  case QR
  case OPEN_WALLET
  case EKYC
  case LINK_BANK
  case SDK_PAYMENT
  case TOPUP
  case PHONE_CARD
  case DATA_CARD
  case SERVICES_CARD
  case BILLING
  case GAME_CARD
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol LibListener {
  func getInfoSuccess(user: Swift.String)
  func onLogoutSuccessful()
  func onError(errorCode: Swift.Int, message: Swift.String)
  func onCloseSDK()
  func sdkDidComplete(action: Swift.String, status: Swift.Bool?, param: [Swift.String : Any]?)
  func backToAppFrom(action: Swift.String)
}
public class NPayManager {
  public var delegate: (any NPayFramework.LibListener)?
  public init(vController: UIKit.UIViewController, sdkCfgs: NPayFramework.SDKConfigs)
  public func login()
  public func openWallet(action: Swift.String)
  public func openSDKWithAction(action: NPayFramework.ServiceAction, vController: UIKit.UIViewController)
  public func openPaymentOnSDK(orderDataString: Swift.String!, vController: UIKit.UIViewController, paymentMethod: NPayFramework.PaymentMethod = .WALLET, isShowResultScreen: Swift.Bool = true)
  public func open9PayApp()
  public func getUserInfo()
  public func refreshAccessToken()
  public func logout()
  public func close()
  public func getListPaymentMethod(onSuccess: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func createOrder(amount: Swift.String, productName: Swift.String, bType: Swift.String, bInfo: Swift.String, onFailed: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func testOrder(amount: Swift.String, productName: Swift.String, bType: Swift.String, bInfo: Swift.String, onFailed: @escaping ([Swift.String : Any]) -> Swift.Void)
  @objc deinit
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
public class SDKConfigs {
  public init(merchantCode: Swift.String, secretKey: Swift.String, uid: Swift.String?, brandColor: Swift.String, env: NPayFramework.EnvironmentKey, phoneNumber: Swift.String = "")
  public func getMerchantCode() -> Swift.String
  public func getSecretKey() -> Swift.String
  public func getUid() -> Swift.String
  public func getBrandColor() -> Swift.String
  public func getPhoneNumber() -> Swift.String
  @objc deinit
}
public enum ErrorMessagePlacement {
  case `default`
  case bottom
  public static func == (a: NPayFramework.ErrorMessagePlacement, b: NPayFramework.ErrorMessagePlacement) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class SkyFloatingLabelTextField : UIKit.UITextField {
  @objc @_Concurrency.MainActor @preconcurrency open var isLTRLanguage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var titleFadeInDuration: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var titleFadeOutDuration: Swift.Double
  @IBInspectable @_Concurrency.MainActor @preconcurrency @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var errorMessagePlacement: NPayFramework.ErrorMessagePlacement {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency open var errorLabelAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var titleFont: UIKit.UIFont {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var lineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var errorColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var lineErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var textErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var titleErrorColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var disabledColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var selectedTitleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var selectedLineColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var lineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var selectedLineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var lineView: UIKit.UIView!
  @_Concurrency.MainActor @preconcurrency open var titleLabel: UIKit.UILabel!
  @_Concurrency.MainActor @preconcurrency open var errorLabel: UIKit.UILabel!
  @_Concurrency.MainActor @preconcurrency open var titleFormatter: (_ text: Swift.String) -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var errorMessage: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open var editingOrSelected: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var hasErrorMessage: Swift.Bool {
    get
  }
  @IBInspectable @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @IBInspectable @_Concurrency.MainActor @preconcurrency @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var selectedTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var title: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency open func editingChanged()
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency open func updateColors()
  @_Concurrency.MainActor @preconcurrency open func setTitleVisible(_ titleVisible: Swift.Bool, animated: Swift.Bool = false, animationCompletion: ((_ completed: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency open func isTitleVisible() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func isErrorVisible() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency open func titleLabelRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency open func errorLabelRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency open func lineViewRectForBounds(_ bounds: CoreFoundation.CGRect, editing: Swift.Bool) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency open func titleHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open func errorHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency open func textHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class HoshiTextField : NPayFramework.TextFieldEffects {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var borderInactiveColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var borderActiveColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var placeholderFontScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency override open func drawViewsForRect(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency override open func animateViewsForTextEntry()
  @_Concurrency.MainActor @preconcurrency override open func animateViewsForTextDisplay()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum PopoverOption {
  case arrowSize(CoreFoundation.CGSize)
  case animationIn(Foundation.TimeInterval)
  case animationOut(Foundation.TimeInterval)
  case cornerRadius(CoreFoundation.CGFloat)
  case sideEdge(CoreFoundation.CGFloat)
  case blackOverlayColor(UIKit.UIColor)
  case overlayBlur(UIKit.UIBlurEffect.Style)
  case type(NPayFramework.PopoverType)
  case color(UIKit.UIColor)
  case dismissOnBlackOverlayTap(Swift.Bool)
  case showBlackOverlay(Swift.Bool)
  case springDamping(CoreFoundation.CGFloat)
  case initialSpringVelocity(CoreFoundation.CGFloat)
  case sideOffset(CoreFoundation.CGFloat)
  case borderColor(UIKit.UIColor)
}
@objc public enum PopoverType : Swift.Int {
  case up
  case down
  case left
  case right
  case auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers @_Concurrency.MainActor @preconcurrency open class Popover : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency open var arrowSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency open var animationIn: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency open var animationOut: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency open var cornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var sideEdge: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var popoverType: NPayFramework.PopoverType
  @objc @_Concurrency.MainActor @preconcurrency open var blackOverlayColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency open var overlayBlur: UIKit.UIBlurEffect?
  @objc @_Concurrency.MainActor @preconcurrency open var popoverColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency open var dismissOnBlackOverlayTap: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency open var showBlackOverlay: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency open var highlightFromView: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency open var highlightCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var springDamping: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var initialSpringVelocity: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var sideOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency open var borderColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor @preconcurrency open var willShowHandler: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency open var willDismissHandler: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency open var didShowHandler: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency open var didDismissHandler: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var blackOverlay: UIKit.UIControl {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency public init(showHandler: (() -> ())?, dismissHandler: (() -> ())?)
  @_Concurrency.MainActor @preconcurrency public init(options: [NPayFramework.PopoverOption]?, showHandler: (() -> ())? = nil, dismissHandler: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency open func showAsDialog(_ contentView: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency open func showAsDialog(_ contentView: UIKit.UIView, inView: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency open func show(_ contentView: UIKit.UIView, fromView: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency open func show(_ contentView: UIKit.UIView, fromView: UIKit.UIView, inView: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency open func show(_ contentView: UIKit.UIView, point: CoreFoundation.CGPoint)
  @objc @_Concurrency.MainActor @preconcurrency open func show(_ contentView: UIKit.UIView, point: CoreFoundation.CGPoint, inView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func accessibilityPerformEscape() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency open func dismiss()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum EnvironmentKey : Swift.String {
  case STG
  case SANDBOX
  case PRODUCTION
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func loadGif(name: Swift.String)
  @available(iOS 9.0, *)
  @_Concurrency.MainActor @preconcurrency public func loadGif(asset: Swift.String)
}
extension UIKit.UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
  @available(iOS 9.0, *)
  public class func gif(asset: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func imageFromServerURL(urlString: Swift.String, PlaceHolderImage: UIKit.UIImage)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor @preconcurrency public static let modelName: Swift.String
}
public enum LoadingType {
  case iOSDefault
  case ninePay
  case custom
  public static func == (a: NPayFramework.LoadingType, b: NPayFramework.LoadingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NPayFramework.IconType : Swift.Equatable {}
extension NPayFramework.IconType : Swift.Hashable {}
extension NPayFramework.IconType : Swift.RawRepresentable {}
extension NPayFramework.TextFieldEffects.AnimationType : Swift.Equatable {}
extension NPayFramework.TextFieldEffects.AnimationType : Swift.Hashable {}
extension NPayFramework.TextFieldEffects.AnimationType : Swift.RawRepresentable {}
extension NPayFramework.PaymentMethod : Swift.Equatable {}
extension NPayFramework.PaymentMethod : Swift.Hashable {}
extension NPayFramework.PaymentMethod : Swift.RawRepresentable {}
extension NPayFramework.ServiceAction : Swift.Equatable {}
extension NPayFramework.ServiceAction : Swift.Hashable {}
extension NPayFramework.ServiceAction : Swift.RawRepresentable {}
extension NPayFramework.ErrorMessagePlacement : Swift.Equatable {}
extension NPayFramework.ErrorMessagePlacement : Swift.Hashable {}
extension NPayFramework.PopoverType : Swift.Equatable {}
extension NPayFramework.PopoverType : Swift.Hashable {}
extension NPayFramework.PopoverType : Swift.RawRepresentable {}
extension NPayFramework.EnvironmentKey : Swift.Equatable {}
extension NPayFramework.EnvironmentKey : Swift.Hashable {}
extension NPayFramework.EnvironmentKey : Swift.RawRepresentable {}
extension NPayFramework.LoadingType : Swift.Equatable {}
extension NPayFramework.LoadingType : Swift.Hashable {}
